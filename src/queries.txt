CREATE TABLE item_categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create items table
CREATE TABLE items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    brand VARCHAR(255) NOT NULL,
    category_id UUID NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    description TEXT,
    condition VARCHAR(50) NOT NULL,
    image_filename VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES item_categories(id)
);

-- Create item_stock table
CREATE TABLE item_stock (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    item_id UUID NOT NULL,
    quantity INTEGER NOT NULL DEFAULT 0,
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (item_id) REFERENCES items(id)
);

-- Create indexes for better query performance
CREATE INDEX idx_items_category ON items(category_id);
CREATE INDEX idx_items_price ON items(price);
CREATE INDEX idx_items_condition ON items(condition);
CREATE INDEX idx_item_stock_item ON item_stock(item_id);




CREATE OR REPLACE FUNCTION get_all_items()
RETURNS TABLE (
    id UUID,
    name VARCHAR,
    brand VARCHAR,
    category_id UUID,
    category_name VARCHAR,
    price DECIMAL,
    description TEXT,
    condition VARCHAR,
    image_filename VARCHAR,
    quantity INTEGER,
    created_at TIMESTAMP WITH TIME ZONE,
    updated_at TIMESTAMP WITH TIME ZONE
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        i.id, i.name, i.brand, i.category_id, 
        c.name as category_name, i.price, i.description,
        i.condition, i.image_filename, s.quantity,
        i.created_at, i.updated_at
    FROM items i
    LEFT JOIN item_categories c ON i.category_id = c.id
    LEFT JOIN item_stock s ON i.id = s.item_id
    ORDER BY i.created_at DESC;
END;
$$ LANGUAGE plpgsql;

-- Function to add a new item
CREATE OR REPLACE FUNCTION add_item(
    p_name VARCHAR,
    p_brand VARCHAR,
    p_category_id UUID,
    p_price DECIMAL,
    p_description TEXT,
    p_condition VARCHAR,
    p_image_filename VARCHAR
)
RETURNS UUID AS $$
DECLARE
    v_item_id UUID;
BEGIN
    INSERT INTO items (
        name, brand, category_id, price, 
        description, condition, image_filename
    )
    VALUES (
        p_name, p_brand, p_category_id, p_price,
        p_description, p_condition, p_image_filename
    )
    RETURNING id INTO v_item_id;
    
    -- Initialize stock for the new item
    INSERT INTO item_stock (item_id, quantity)
    VALUES (v_item_id, 0);
    
    RETURN v_item_id;
END;
$$ LANGUAGE plpgsql;

-- Function to update an item
CREATE OR REPLACE FUNCTION update_item(
    p_id UUID,
    p_name VARCHAR,
    p_brand VARCHAR,
    p_category_id UUID,
    p_price DECIMAL,
    p_description TEXT,
    p_condition VARCHAR,
    p_image_filename VARCHAR
)
RETURNS BOOLEAN AS $$
BEGIN
    UPDATE items
    SET 
        name = p_name,
        brand = p_brand,
        category_id = p_category_id,
        price = p_price,
        description = p_description,
        condition = p_condition,
        image_filename = p_image_filename,
        updated_at = CURRENT_TIMESTAMP
    WHERE id = p_id;
    
    RETURN FOUND;
END;
$$ LANGUAGE plpgsql;

-- Function to delete an item
CREATE OR REPLACE FUNCTION delete_item(p_id UUID)
RETURNS BOOLEAN AS $$
BEGIN
    DELETE FROM items WHERE id = p_id;
    RETURN FOUND;
END;
$$ LANGUAGE plpgsql;

-- Function to update stock
CREATE OR REPLACE FUNCTION update_stock(
    p_item_id UUID,
    p_quantity INTEGER
)
RETURNS BOOLEAN AS $$
BEGIN
    INSERT INTO item_stock (item_id, quantity)
    VALUES (p_item_id, p_quantity)
    ON CONFLICT (item_id) 
    DO UPDATE SET 
        quantity = p_quantity,
        last_updated = CURRENT_TIMESTAMP;
    
    RETURN FOUND;
END;
$$ LANGUAGE plpgsql;